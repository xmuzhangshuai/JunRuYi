package com.junruyi.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.junruyi.entities.EquipMent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQUIP_MENT".
*/
public class EquipMentDao extends AbstractDao<EquipMent, Long> {

    public static final String TABLENAME = "EQUIP_MENT";

    /**
     * Properties of entity EquipMent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EquipMentName = new Property(1, String.class, "equipMentName", false, "EQUIP_MENT_NAME");
        public final static Property EquipMentLogo = new Property(2, Integer.class, "equipMentLogo", false, "EQUIP_MENT_LOGO");
    };

    private DaoSession daoSession;


    public EquipMentDao(DaoConfig config) {
        super(config);
    }
    
    public EquipMentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQUIP_MENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EQUIP_MENT_NAME\" TEXT," + // 1: equipMentName
                "\"EQUIP_MENT_LOGO\" INTEGER);"); // 2: equipMentLogo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQUIP_MENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EquipMent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String equipMentName = entity.getEquipMentName();
        if (equipMentName != null) {
            stmt.bindString(2, equipMentName);
        }
 
        Integer equipMentLogo = entity.getEquipMentLogo();
        if (equipMentLogo != null) {
            stmt.bindLong(3, equipMentLogo);
        }
    }

    @Override
    protected void attachEntity(EquipMent entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EquipMent readEntity(Cursor cursor, int offset) {
        EquipMent entity = new EquipMent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // equipMentName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // equipMentLogo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EquipMent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEquipMentName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEquipMentLogo(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EquipMent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EquipMent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
